Resolving dependencies...
Up to date
ouroboros-storage
  Storage
    ChainDB
      ChainDB q-s-m
        sequential: 
[37mModel {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [],
    immutableDbChain = Genesis,
    cps = ChainProducerState {
      chainState = Genesis,
      chainFollowers = Map.fromList
        [],
      nextFollowerId = 0},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point Origin,
        lastAppliedHash = GenesisHash},
      headerState = HeaderState {
        headerStateTip = Origin,
        headerStateChainDep = `()`}},
    initLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point Origin,
        lastAppliedHash = GenesisHash},
      headerState = HeaderState {
        headerStateTip = Origin,
        headerStateChainDep = `()`}},
    iterators = Map.fromList [],
    valid = Set.fromList [],
    invalid = Map.fromList [],
    currentSlot = SlotNo 0,
    maxClockSkew = 100000,
    isOpen = True},
  knownIters = RefEnv [],
  knownFollowers = RefEnv [],
  modelConfig = Opaque}[0m

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 7029910109426438170
                , thPrevHash = GenesisHash
                , thBodyHash = TestBodyHash 590682968308805178
                , thSlotNo = SlotNo 1
                , thBlockNo = BlockNo 0
                , thChainLength = ChainLength 1
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 1 , tbIsValid = False }
          }
  } ==> At { unAt = Resp { getResp = Right (Point Origin) } } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [42m[97m+_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0;42m[0m],
    immutableDbChain = [37mGenesis[0m,
    invalid = Map.fromList
      [
        [42m[97m+_Ã—_
          (TestHeaderHash
            7029910109426438170)
          (_Ã—_
            (ValidationError
              (ExtValidationErrorLedger
                InvalidBlock))
            (SlotNo 1))[0;42m[0m],
    currentSlot = SlotNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    cps = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 2308540464147526198
                , thPrevHash = GenesisHash
                , thBodyHash = TestBodyHash 590681868797176966
                , thSlotNo = SlotNo 1
                , thBlockNo = BlockNo 0
                , thChainLength = ChainLength 1
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 1
                      , blockPointHash = TestHeaderHash 2308540464147526198
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [42m[97m+_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = [41m[97m-Genesis[0;41m[0m
      [42m[97m+:>
        Genesis
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              2308540464147526198,
            thPrevHash = GenesisHash,
            thBodyHash = TestBodyHash
              590681868797176966,
            thSlotNo = SlotNo 1,
            thBlockNo = BlockNo 0,
            thChainLength = ChainLength 1,
            thIsEBB = RegularBlock},
          testBody = TestBody {
            tbForkNo = 2,
            tbIsValid = True}}[0;42m[0m,
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          [41m[97m-Origin[0;41m[0m
          [42m[97m+(At
            Block {
              blockPointSlot = SlotNo 1,
              blockPointHash = TestHeaderHash
                2308540464147526198})[0;42m[0m,
        lastAppliedHash = [41m[97m-GenesisHash[0;41m[0m
        [42m[97m+BlockHash
          (TestHeaderHash
            2308540464147526198)[0;42m[0m},
      headerState = HeaderState {
        headerStateTip = [41m[97m-Origin[0;41m[0m
        [42m[97m+At
          AnnTip {
            annTipSlotNo = SlotNo 1,
            annTipBlockNo = BlockNo 0,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                2308540464147526198)
              IsNotEBB}[0;42m[0m,
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [42m[97m+TestHeaderHash
          2308540464147526198[0;42m[0m],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 8656999388501844387
                , thPrevHash = BlockHash (TestHeaderHash 2308540464147526198)
                , thBodyHash = TestBodyHash 590680769285548757
                , thSlotNo = SlotNo 2
                , thBlockNo = BlockNo 1
                , thChainLength = ChainLength 2
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 2
                      , blockPointHash = TestHeaderHash 8656999388501844387
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [42m[97m+_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0;42m[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = :>
        [41m[97m-Genesis[0;41m[0m
        [42m[97m+(:>
          Genesis
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}})[0;42m[0m
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              [41m[97m-2308540464147526198[0;41m[0m
              [42m[97m+8656999388501844387[0;42m[0m,
            thPrevHash = [41m[97m-GenesisHash[0;41m[0m
            [42m[97m+BlockHash
              (TestHeaderHash
                2308540464147526198)[0;42m[0m,
            thBodyHash = TestBodyHash
              [41m[97m-590681868797176966[0;41m[0m
              [42m[97m+590680769285548757[0;42m[0m,
            thSlotNo = SlotNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
            thBlockNo = BlockNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
            thChainLength = ChainLength
              [41m[97m-1[0;41m[0m
              [42m[97m+2[0;42m[0m,
            thIsEBB = [37mRegularBlock[0m},
          testBody = TestBody {
            tbForkNo = [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
            tbIsValid = [37mTrue[0m}},
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          (At
            Block {
              blockPointSlot = SlotNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
              blockPointHash = TestHeaderHash
                [41m[97m-2308540464147526198[0;41m[0m
                [42m[97m+8656999388501844387[0;42m[0m}),
        lastAppliedHash = BlockHash
          (TestHeaderHash
            [41m[97m-2308540464147526198[0;41m[0m
            [42m[97m+8656999388501844387[0;42m[0m)},
      headerState = HeaderState {
        headerStateTip = At
          AnnTip {
            annTipSlotNo = SlotNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
            annTipBlockNo = BlockNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                [41m[97m-2308540464147526198[0;41m[0m
                [42m[97m+8656999388501844387[0;42m[0m)
              [37mIsNotEBB[0m},
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [37mTestHeaderHash
          2308540464147526198[0m,
        [42m[97m+TestHeaderHash
          8656999388501844387[0;42m[0m],
    currentSlot = SlotNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash (-340232222464533890)
                , thPrevHash = BlockHash (TestHeaderHash 8656999388501844387)
                , thBodyHash = TestBodyHash 590680769285548757
                , thSlotNo = SlotNo 4
                , thBlockNo = BlockNo 2
                , thChainLength = ChainLength 3
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 4
                      , blockPointHash = TestHeaderHash (-340232222464533890)
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [42m[97m+_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = :>
        (:>
          [41m[97m-Genesis[0;41m[0m
          [42m[97m+(:>
            Genesis
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  2308540464147526198,
                thPrevHash = GenesisHash,
                thBodyHash = TestBodyHash
                  590681868797176966,
                thSlotNo = SlotNo 1,
                thBlockNo = BlockNo 0,
                thChainLength = ChainLength 1,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 2,
                tbIsValid = True}})[0;42m[0m
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                [41m[97m-2308540464147526198[0;41m[0m
                [42m[97m+8656999388501844387[0;42m[0m,
              thPrevHash = [41m[97m-GenesisHash[0;41m[0m
              [42m[97m+BlockHash
                (TestHeaderHash
                  2308540464147526198)[0;42m[0m,
              thBodyHash = TestBodyHash
                [41m[97m-590681868797176966[0;41m[0m
                [42m[97m+590680769285548757[0;42m[0m,
              thSlotNo = SlotNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
              thBlockNo = BlockNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
              thChainLength = ChainLength
                [41m[97m-1[0;41m[0m
                [42m[97m+2[0;42m[0m,
              thIsEBB = [37mRegularBlock[0m},
            testBody = TestBody {
              tbForkNo = [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
              tbIsValid = [37mTrue[0m}})
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              [41m[97m-8656999388501844387[0;41m[0m
              [42m[97m+`-340232222464533890`[0;42m[0m,
            thPrevHash = BlockHash
              (TestHeaderHash
                [41m[97m-2308540464147526198[0;41m[0m
                [42m[97m+8656999388501844387[0;42m[0m),
            thSlotNo = SlotNo [41m[97m-2[0;41m[0m [42m[97m+4[0;42m[0m,
            thBlockNo = BlockNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
            thChainLength = ChainLength
              [41m[97m-2[0;41m[0m
              [42m[97m+3[0;42m[0m,
            thIsEBB = [37mRegularBlock[0m,
            thBodyHash = ...},
          testBody = ...},
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          (At
            Block {
              blockPointSlot = SlotNo [41m[97m-2[0;41m[0m [42m[97m+4[0;42m[0m,
              blockPointHash = TestHeaderHash
                [41m[97m-8656999388501844387[0;41m[0m
                [42m[97m+`-340232222464533890`[0;42m[0m}),
        lastAppliedHash = BlockHash
          (TestHeaderHash
            [41m[97m-8656999388501844387[0;41m[0m
            [42m[97m+`-340232222464533890`[0;42m[0m)},
      headerState = HeaderState {
        headerStateTip = At
          AnnTip {
            annTipSlotNo = SlotNo [41m[97m-2[0;41m[0m [42m[97m+4[0;42m[0m,
            annTipBlockNo = BlockNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                [41m[97m-8656999388501844387[0;41m[0m
                [42m[97m+`-340232222464533890`[0;42m[0m)
              [37mIsNotEBB[0m},
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [42m[97m+TestHeaderHash
          `-340232222464533890`[0;42m[0m,
        [37mTestHeaderHash
          2308540464147526198[0m,
        [37mTestHeaderHash
          8656999388501844387[0m],
    currentSlot = SlotNo [41m[97m-2[0;41m[0m [42m[97m+4[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      Stream
        (StreamFromInclusive
           (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)))
        (StreamToInclusive
           (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))))
  } ==> At
  { unAt =
      Resp { getResp = Right (Iter (Reference (Concrete Opaque))) }
  } [ 0 ]

Model {
  dbModel = Model {
    immutableDbChain = [37mGenesis[0m,
    iterators = Map.fromList
      [
        [42m[97m+_Ã—_
          0
          [
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  2308540464147526198,
                thPrevHash = GenesisHash,
                thBodyHash = TestBodyHash
                  590681868797176966,
                thSlotNo = SlotNo 1,
                thBlockNo = BlockNo 0,
                thChainLength = ChainLength 1,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 2,
                tbIsValid = True}},
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  8656999388501844387,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    2308540464147526198),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 2,
                thBlockNo = BlockNo 1,
                thChainLength = ChainLength 2,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}},
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  `-340232222464533890`,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    8656999388501844387),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 4,
                thBlockNo = BlockNo 2,
                thChainLength = ChainLength 3,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}][0;42m[0m],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    volatileDbBlocks = ...},
  knownIters = RefEnv
    [[42m[97m+_Ã—_ (Reference Opaque) 0[0;42m[0m],
  modelConfig = [37mOpaque[0m,
  knownFollowers = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 5928148677101900795
                , thPrevHash = BlockHash (TestHeaderHash 5227245844658471275)
                , thBodyHash = TestBodyHash 590682968308805179
                , thSlotNo = SlotNo 5
                , thBlockNo = BlockNo 2
                , thChainLength = ChainLength 3
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 1 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 4
                      , blockPointHash = TestHeaderHash (-340232222464533890)
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [37m_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [42m[97m+_Ã—_
          (TestHeaderHash
            5928148677101900795)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5928148677101900795,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5227245844658471275),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 5,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m],
    immutableDbChain = [37mGenesis[0m,
    currentSlot = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    cps = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 5227245844658471275
                , thPrevHash = BlockHash (TestHeaderHash 2308540464147526198)
                , thBodyHash = TestBodyHash 590682968308805179
                , thSlotNo = SlotNo 4
                , thBlockNo = BlockNo 1
                , thChainLength = ChainLength 2
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 1 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 5
                      , blockPointHash = TestHeaderHash 5928148677101900795
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [37m_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [42m[97m+_Ã—_
          (TestHeaderHash
            5227245844658471275)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5227245844658471275,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            5928148677101900795)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5928148677101900795,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5227245844658471275),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 5,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = :>
        (:>
          [37m(:>
            Genesis
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  2308540464147526198,
                thPrevHash = GenesisHash,
                thBodyHash = TestBodyHash
                  590681868797176966,
                thSlotNo = SlotNo 1,
                thBlockNo = BlockNo 0,
                thChainLength = ChainLength 1,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 2,
                tbIsValid = True}})[0m
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                [41m[97m-8656999388501844387[0;41m[0m
                [42m[97m+5227245844658471275[0;42m[0m,
              thBodyHash = TestBodyHash
                [41m[97m-590680769285548757[0;41m[0m
                [42m[97m+590682968308805179[0;42m[0m,
              thSlotNo = SlotNo [41m[97m-2[0;41m[0m [42m[97m+4[0;42m[0m,
              thIsEBB = [37mRegularBlock[0m,
              thPrevHash = ...},
            testBody = TestBody {
              tbForkNo = [41m[97m-3[0;41m[0m [42m[97m+1[0;42m[0m,
              tbIsValid = [37mTrue[0m}})
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              [41m[97m-`-340232222464533890`[0;41m[0m
              [42m[97m+5928148677101900795[0;42m[0m,
            thPrevHash = BlockHash
              (TestHeaderHash
                [41m[97m-8656999388501844387[0;41m[0m
                [42m[97m+5227245844658471275[0;42m[0m),
            thBodyHash = TestBodyHash
              [41m[97m-590680769285548757[0;41m[0m
              [42m[97m+590682968308805179[0;42m[0m,
            thSlotNo = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
            thIsEBB = [37mRegularBlock[0m,
            thBlockNo = ...},
          testBody = TestBody {
            tbForkNo = [41m[97m-3[0;41m[0m [42m[97m+1[0;42m[0m,
            tbIsValid = [37mTrue[0m}},
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          (At
            Block {
              blockPointSlot = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
              blockPointHash = TestHeaderHash
                [41m[97m-`-340232222464533890`[0;41m[0m
                [42m[97m+5928148677101900795[0;42m[0m}),
        lastAppliedHash = BlockHash
          (TestHeaderHash
            [41m[97m-`-340232222464533890`[0;41m[0m
            [42m[97m+5928148677101900795[0;42m[0m)},
      headerState = HeaderState {
        headerStateTip = At
          AnnTip {
            annTipSlotNo = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                [41m[97m-`-340232222464533890`[0;41m[0m
                [42m[97m+5928148677101900795[0;42m[0m)
              [37mIsNotEBB[0m,
            annTipBlockNo = ...},
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [37mTestHeaderHash
          `-340232222464533890`[0m,
        [37mTestHeaderHash
          2308540464147526198[0m,
        [42m[97m+TestHeaderHash
          5227245844658471275[0;42m[0m,
        [42m[97m+TestHeaderHash
          5928148677101900795[0;42m[0m,
        [37mTestHeaderHash
          8656999388501844387[0m],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At { unAt = IteratorNext (Reference (Concrete Opaque)) } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (IterResult
                 (IteratorResult
                    ( TestBlock
                        { testHeader =
                            TestHeader
                              { thHash = TestHeaderHash 2308540464147526198
                              , thPrevHash = GenesisHash
                              , thBodyHash = TestBodyHash 590681868797176966
                              , thSlotNo = SlotNo 1
                              , thBlockNo = BlockNo 0
                              , thChainLength = ChainLength 1
                              , thIsEBB = RegularBlock
                              }
                        , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                        }
                    , TestBlock
                        { testHeader =
                            TestHeader
                              { thHash = TestHeaderHash 2308540464147526198
                              , thPrevHash = GenesisHash
                              , thBodyHash = TestBodyHash 590681868797176966
                              , thSlotNo = SlotNo 1
                              , thBlockNo = BlockNo 0
                              , thChainLength = ChainLength 1
                              , thIsEBB = RegularBlock
                              }
                        , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                        }
                    , TestHeader
                        { thHash = TestHeaderHash 2308540464147526198
                        , thPrevHash = GenesisHash
                        , thBodyHash = TestBodyHash 590681868797176966
                        , thSlotNo = SlotNo 1
                        , thBlockNo = BlockNo 0
                        , thChainLength = ChainLength 1
                        , thIsEBB = RegularBlock
                        }
                    , "\131\NUL\136\NUL\ESC \t\149R+ \242\&6\128\ESC\b2\134\a\180\235l\134\SOH\NUL\SOH\129\SOH\131\NUL\STX\245"
                    , "\136\NUL\ESC \t\149R+ \242\&6\128\ESC\b2\134\a\180\235l\134\SOH\NUL\SOH\129\SOH"
                    , TestHeaderHash 2308540464147526198
                    , SlotNo 1
                    , IsNotEBB
                    , 32
                    , 26
                    , SomeSecond NestedCtxt { flipNestedCtxt = CtxtTestBlock }
                    )))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    immutableDbChain = [37mGenesis[0m,
    iterators = Map.fromList
      [
        _Ã—_
          [37m0[0m
          [
            [41m[97m-TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  2308540464147526198,
                thPrevHash = GenesisHash,
                thBodyHash = TestBodyHash
                  590681868797176966,
                thSlotNo = SlotNo 1,
                thBlockNo = BlockNo 0,
                thChainLength = ChainLength 1,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 2,
                tbIsValid = True}}[0;41m[0m,
            [37mTestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  8656999388501844387,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    2308540464147526198),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 2,
                thBlockNo = BlockNo 1,
                thChainLength = ChainLength 2,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}[0m,
            [37mTestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  `-340232222464533890`,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    8656999388501844387),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 4,
                thBlockNo = BlockNo 2,
                thChainLength = ChainLength 3,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}[0m]],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    volatileDbBlocks = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash 3200521468649028381
                , thPrevHash = BlockHash (TestHeaderHash 5928148677101900795)
                , thBodyHash = TestBodyHash 590681868797176966
                , thSlotNo = SlotNo 8
                , thBlockNo = BlockNo 3
                , thChainLength = ChainLength 4
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 8
                      , blockPointHash = TestHeaderHash 3200521468649028381
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [37m_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [42m[97m+_Ã—_
          (TestHeaderHash
            3200521468649028381)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                3200521468649028381,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5928148677101900795),
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 8,
              thBlockNo = BlockNo 3,
              thChainLength = ChainLength 4,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            5227245844658471275)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5227245844658471275,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            5928148677101900795)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5928148677101900795,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5227245844658471275),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 5,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = :>
        (:>
          (:>
            [41m[97m-Genesis[0;41m[0m
            [42m[97m+(:>
              Genesis
              TestBlock {
                testHeader = TestHeader {
                  thHash = TestHeaderHash
                    2308540464147526198,
                  thPrevHash = GenesisHash,
                  thBodyHash = TestBodyHash
                    590681868797176966,
                  thSlotNo = SlotNo 1,
                  thBlockNo = BlockNo 0,
                  thChainLength = ChainLength 1,
                  thIsEBB = RegularBlock},
                testBody = TestBody {
                  tbForkNo = 2,
                  tbIsValid = True}})[0;42m[0m
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  [41m[97m-2308540464147526198[0;41m[0m
                  [42m[97m+5227245844658471275[0;42m[0m,
                thPrevHash = [41m[97m-GenesisHash[0;41m[0m
                [42m[97m+BlockHash
                  (TestHeaderHash
                    2308540464147526198)[0;42m[0m,
                thBodyHash = TestBodyHash
                  [41m[97m-590681868797176966[0;41m[0m
                  [42m[97m+590682968308805179[0;42m[0m,
                thSlotNo = SlotNo [41m[97m-1[0;41m[0m [42m[97m+4[0;42m[0m,
                thBlockNo = BlockNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
                thChainLength = ChainLength
                  [41m[97m-1[0;41m[0m
                  [42m[97m+2[0;42m[0m,
                thIsEBB = [37mRegularBlock[0m},
              testBody = TestBody {
                tbForkNo = [41m[97m-2[0;41m[0m [42m[97m+1[0;42m[0m,
                tbIsValid = [37mTrue[0m}})
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                [41m[97m-5227245844658471275[0;41m[0m
                [42m[97m+5928148677101900795[0;42m[0m,
              thPrevHash = BlockHash
                (TestHeaderHash
                  [41m[97m-2308540464147526198[0;41m[0m
                  [42m[97m+5227245844658471275[0;42m[0m),
              thSlotNo = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
              thBlockNo = BlockNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
              thChainLength = ChainLength
                [41m[97m-2[0;41m[0m
                [42m[97m+3[0;42m[0m,
              thIsEBB = [37mRegularBlock[0m,
              thBodyHash = ...},
            testBody = ...})
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              [41m[97m-5928148677101900795[0;41m[0m
              [42m[97m+3200521468649028381[0;42m[0m,
            thPrevHash = BlockHash
              (TestHeaderHash
                [41m[97m-5227245844658471275[0;41m[0m
                [42m[97m+5928148677101900795[0;42m[0m),
            thBodyHash = TestBodyHash
              [41m[97m-590682968308805179[0;41m[0m
              [42m[97m+590681868797176966[0;42m[0m,
            thSlotNo = SlotNo [41m[97m-5[0;41m[0m [42m[97m+8[0;42m[0m,
            thBlockNo = BlockNo [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
            thChainLength = ChainLength
              [41m[97m-3[0;41m[0m
              [42m[97m+4[0;42m[0m,
            thIsEBB = [37mRegularBlock[0m},
          testBody = TestBody {
            tbForkNo = [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
            tbIsValid = [37mTrue[0m}},
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          (At
            Block {
              blockPointSlot = SlotNo [41m[97m-5[0;41m[0m [42m[97m+8[0;42m[0m,
              blockPointHash = TestHeaderHash
                [41m[97m-5928148677101900795[0;41m[0m
                [42m[97m+3200521468649028381[0;42m[0m}),
        lastAppliedHash = BlockHash
          (TestHeaderHash
            [41m[97m-5928148677101900795[0;41m[0m
            [42m[97m+3200521468649028381[0;42m[0m)},
      headerState = HeaderState {
        headerStateTip = At
          AnnTip {
            annTipSlotNo = SlotNo [41m[97m-5[0;41m[0m [42m[97m+8[0;42m[0m,
            annTipBlockNo = BlockNo [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                [41m[97m-5928148677101900795[0;41m[0m
                [42m[97m+3200521468649028381[0;42m[0m)
              [37mIsNotEBB[0m},
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [37mTestHeaderHash
          `-340232222464533890`[0m,
        [37mTestHeaderHash
          2308540464147526198[0m,
        [42m[97m+TestHeaderHash
          3200521468649028381[0;42m[0m,
        [37mTestHeaderHash
          5227245844658471275[0m,
        [37mTestHeaderHash
          5928148677101900795[0m,
        [37mTestHeaderHash
          8656999388501844387[0m],
    currentSlot = SlotNo [41m[97m-5[0;41m[0m [42m[97m+8[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At
  { unAt =
      AddBlock
        TestBlock
          { testHeader =
              TestHeader
                { thHash = TestHeaderHash (-5616847762568615097)
                , thPrevHash = BlockHash (TestHeaderHash 3200521468649028381)
                , thBodyHash = TestBodyHash 590680769285548757
                , thSlotNo = SlotNo 9
                , thBlockNo = BlockNo 4
                , thChainLength = ChainLength 5
                , thIsEBB = RegularBlock
                }
          , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
          }
  } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (Point
                 (At
                    Block
                      { blockPointSlot = SlotNo 9
                      , blockPointHash = TestHeaderHash (-5616847762568615097)
                      }))
        }
  } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [42m[97m+_Ã—_
          (TestHeaderHash
            `-5616847762568615097`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-5616847762568615097`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  3200521468649028381),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 9,
              thBlockNo = BlockNo 4,
              thChainLength = ChainLength 5,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0;42m[0m,
        [37m_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            3200521468649028381)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                3200521468649028381,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5928148677101900795),
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 8,
              thBlockNo = BlockNo 3,
              thChainLength = ChainLength 4,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            5227245844658471275)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5227245844658471275,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            5928148677101900795)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5928148677101900795,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5227245844658471275),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 5,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0m,
        [37m_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m],
    immutableDbChain = [37mGenesis[0m,
    cps = ChainProducerState {
      chainState = :>
        (:>
          (:>
            (:>
              [41m[97m-Genesis[0;41m[0m
              [42m[97m+(:>
                Genesis
                TestBlock {
                  testHeader = TestHeader {
                    thHash = TestHeaderHash
                      2308540464147526198,
                    thPrevHash = GenesisHash,
                    thBodyHash = TestBodyHash
                      590681868797176966,
                    thSlotNo = SlotNo 1,
                    thBlockNo = BlockNo 0,
                    thChainLength = ChainLength 1,
                    thIsEBB = RegularBlock},
                  testBody = TestBody {
                    tbForkNo = 2,
                    tbIsValid = True}})[0;42m[0m
              TestBlock {
                testHeader = TestHeader {
                  thHash = TestHeaderHash
                    [41m[97m-2308540464147526198[0;41m[0m
                    [42m[97m+5227245844658471275[0;42m[0m,
                  thPrevHash = [41m[97m-GenesisHash[0;41m[0m
                  [42m[97m+BlockHash
                    (TestHeaderHash
                      2308540464147526198)[0;42m[0m,
                  thBodyHash = TestBodyHash
                    [41m[97m-590681868797176966[0;41m[0m
                    [42m[97m+590682968308805179[0;42m[0m,
                  thSlotNo = SlotNo [41m[97m-1[0;41m[0m [42m[97m+4[0;42m[0m,
                  thBlockNo = BlockNo [41m[97m-0[0;41m[0m [42m[97m+1[0;42m[0m,
                  thChainLength = ChainLength
                    [41m[97m-1[0;41m[0m
                    [42m[97m+2[0;42m[0m,
                  thIsEBB = [37mRegularBlock[0m},
                testBody = TestBody {
                  tbForkNo = [41m[97m-2[0;41m[0m [42m[97m+1[0;42m[0m,
                  tbIsValid = [37mTrue[0m}})
            TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  [41m[97m-5227245844658471275[0;41m[0m
                  [42m[97m+5928148677101900795[0;42m[0m,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    [41m[97m-2308540464147526198[0;41m[0m
                    [42m[97m+5227245844658471275[0;42m[0m),
                thSlotNo = SlotNo [41m[97m-4[0;41m[0m [42m[97m+5[0;42m[0m,
                thBlockNo = BlockNo [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
                thChainLength = ChainLength
                  [41m[97m-2[0;41m[0m
                  [42m[97m+3[0;42m[0m,
                thIsEBB = [37mRegularBlock[0m,
                thBodyHash = ...},
              testBody = ...})
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                [41m[97m-5928148677101900795[0;41m[0m
                [42m[97m+3200521468649028381[0;42m[0m,
              thPrevHash = BlockHash
                (TestHeaderHash
                  [41m[97m-5227245844658471275[0;41m[0m
                  [42m[97m+5928148677101900795[0;42m[0m),
              thBodyHash = TestBodyHash
                [41m[97m-590682968308805179[0;41m[0m
                [42m[97m+590681868797176966[0;42m[0m,
              thSlotNo = SlotNo [41m[97m-5[0;41m[0m [42m[97m+8[0;42m[0m,
              thBlockNo = BlockNo [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
              thChainLength = ChainLength
                [41m[97m-3[0;41m[0m
                [42m[97m+4[0;42m[0m,
              thIsEBB = [37mRegularBlock[0m},
            testBody = TestBody {
              tbForkNo = [41m[97m-1[0;41m[0m [42m[97m+2[0;42m[0m,
              tbIsValid = [37mTrue[0m}})
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              [41m[97m-3200521468649028381[0;41m[0m
              [42m[97m+`-5616847762568615097`[0;42m[0m,
            thPrevHash = BlockHash
              (TestHeaderHash
                [41m[97m-5928148677101900795[0;41m[0m
                [42m[97m+3200521468649028381[0;42m[0m),
            thBodyHash = TestBodyHash
              [41m[97m-590681868797176966[0;41m[0m
              [42m[97m+590680769285548757[0;42m[0m,
            thSlotNo = SlotNo [41m[97m-8[0;41m[0m [42m[97m+9[0;42m[0m,
            thBlockNo = BlockNo [41m[97m-3[0;41m[0m [42m[97m+4[0;42m[0m,
            thChainLength = ChainLength
              [41m[97m-4[0;41m[0m
              [42m[97m+5[0;42m[0m,
            thIsEBB = [37mRegularBlock[0m},
          testBody = TestBody {
            tbForkNo = [41m[97m-2[0;41m[0m [42m[97m+3[0;42m[0m,
            tbIsValid = [37mTrue[0m}},
      nextFollowerId = [37m0[0m,
      chainFollowers = ...},
    currentLedger = ExtLedgerState {
      ledgerState = TestLedger {
        lastAppliedPoint = Point
          (At
            Block {
              blockPointSlot = SlotNo [41m[97m-8[0;41m[0m [42m[97m+9[0;42m[0m,
              blockPointHash = TestHeaderHash
                [41m[97m-3200521468649028381[0;41m[0m
                [42m[97m+`-5616847762568615097`[0;42m[0m}),
        lastAppliedHash = BlockHash
          (TestHeaderHash
            [41m[97m-3200521468649028381[0;41m[0m
            [42m[97m+`-5616847762568615097`[0;42m[0m)},
      headerState = HeaderState {
        headerStateTip = At
          AnnTip {
            annTipSlotNo = SlotNo [41m[97m-8[0;41m[0m [42m[97m+9[0;42m[0m,
            annTipBlockNo = BlockNo [41m[97m-3[0;41m[0m [42m[97m+4[0;42m[0m,
            annTipInfo = TipInfoIsEBB
              (TestHeaderHash
                [41m[97m-3200521468649028381[0;41m[0m
                [42m[97m+`-5616847762568615097`[0;42m[0m)
              [37mIsNotEBB[0m},
        headerStateChainDep = [37m`()`[0m}},
    valid = Set.fromList
      [
        [42m[97m+TestHeaderHash
          `-5616847762568615097`[0;42m[0m,
        [37mTestHeaderHash
          `-340232222464533890`[0m,
        [37mTestHeaderHash
          2308540464147526198[0m,
        [37mTestHeaderHash
          3200521468649028381[0m,
        [37mTestHeaderHash
          5227245844658471275[0m,
        [37mTestHeaderHash
          5928148677101900795[0m,
        [37mTestHeaderHash
          8656999388501844387[0m],
    currentSlot = SlotNo [41m[97m-8[0;41m[0m [42m[97m+9[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    initLedger = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At { unAt = PersistBlksThenGC } ==> At { unAt = Resp { getResp = Right (Unit ()) } } [ 0 ]

Model {
  dbModel = Model {
    volatileDbBlocks = Map.fromList
      [
        [37m_Ã—_
          (TestHeaderHash
            `-5616847762568615097`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-5616847762568615097`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  3200521468649028381),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 9,
              thBlockNo = BlockNo 4,
              thChainLength = ChainLength 5,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0m,
        [41m[97m-_Ã—_
          (TestHeaderHash
            `-340232222464533890`)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                `-340232222464533890`,
              thPrevHash = BlockHash
                (TestHeaderHash
                  8656999388501844387),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0;41m[0m,
        [41m[97m-_Ã—_
          (TestHeaderHash
            2308540464147526198)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0;41m[0m,
        [37m_Ã—_
          (TestHeaderHash
            3200521468649028381)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                3200521468649028381,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5928148677101900795),
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 8,
              thBlockNo = BlockNo 3,
              thChainLength = ChainLength 4,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}}[0m,
        [41m[97m-_Ã—_
          (TestHeaderHash
            5227245844658471275)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5227245844658471275,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 4,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0;41m[0m,
        [37m_Ã—_
          (TestHeaderHash
            5928148677101900795)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                5928148677101900795,
              thPrevHash = BlockHash
                (TestHeaderHash
                  5227245844658471275),
              thBodyHash = TestBodyHash
                590682968308805179,
              thSlotNo = SlotNo 5,
              thBlockNo = BlockNo 2,
              thChainLength = ChainLength 3,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = True}}[0m,
        [41m[97m-_Ã—_
          (TestHeaderHash
            7029910109426438170)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                7029910109426438170,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590682968308805178,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 1,
              tbIsValid = False}}[0;41m[0m,
        [41m[97m-_Ã—_
          (TestHeaderHash
            8656999388501844387)
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                8656999388501844387,
              thPrevHash = BlockHash
                (TestHeaderHash
                  2308540464147526198),
              thBodyHash = TestBodyHash
                590680769285548757,
              thSlotNo = SlotNo 2,
              thBlockNo = BlockNo 1,
              thChainLength = ChainLength 2,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 3,
              tbIsValid = True}}[0;41m[0m],
    immutableDbChain = [41m[97m-Genesis[0;41m[0m
    [42m[97m+:>
      (:>
        (:>
          Genesis
          TestBlock {
            testHeader = TestHeader {
              thHash = TestHeaderHash
                2308540464147526198,
              thPrevHash = GenesisHash,
              thBodyHash = TestBodyHash
                590681868797176966,
              thSlotNo = SlotNo 1,
              thBlockNo = BlockNo 0,
              thChainLength = ChainLength 1,
              thIsEBB = RegularBlock},
            testBody = TestBody {
              tbForkNo = 2,
              tbIsValid = True}})
        TestBlock {
          testHeader = TestHeader {
            thHash = TestHeaderHash
              5227245844658471275,
            thPrevHash = BlockHash
              (TestHeaderHash
                2308540464147526198),
            thBodyHash = TestBodyHash
              590682968308805179,
            thSlotNo = SlotNo 4,
            thBlockNo = BlockNo 1,
            thChainLength = ChainLength 2,
            thIsEBB = RegularBlock},
          testBody = TestBody {
            tbForkNo = 1,
            tbIsValid = True}})
      TestBlock {
        testHeader = TestHeader {
          thHash = TestHeaderHash
            5928148677101900795,
          thPrevHash = BlockHash
            (TestHeaderHash
              5227245844658471275),
          thBodyHash = TestBodyHash
            590682968308805179,
          thSlotNo = SlotNo 5,
          thBlockNo = BlockNo 2,
          thChainLength = ChainLength 3,
          thIsEBB = RegularBlock},
        testBody = TestBody {
          tbForkNo = 1,
          tbIsValid = True}}[0;42m[0m,
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    cps = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At { unAt = IteratorNextGCed (Reference (Concrete Opaque)) } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (IterResultGCed
                 IteratorResultGCed
                   { real = True
                   , iterResult =
                       IteratorBlockGCed
                         (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387))
                   })
        }
  } [ 0 ]

Model {
  dbModel = Model {
    iterators = Map.fromList
      [
        _Ã—_
          [37m0[0m
          [
            [41m[97m-TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  8656999388501844387,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    2308540464147526198),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 2,
                thBlockNo = BlockNo 1,
                thChainLength = ChainLength 2,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}[0;41m[0m,
            [37mTestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  `-340232222464533890`,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    8656999388501844387),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 4,
                thBlockNo = BlockNo 2,
                thChainLength = ChainLength 3,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}[0m]],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    volatileDbBlocks = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

   == At { unAt = IteratorNextGCed (Reference (Concrete Opaque)) } ==> At
  { unAt =
      Resp
        { getResp =
            Right
              (IterResultGCed
                 IteratorResultGCed
                   { real = True , iterResult = IteratorExhausted })
        }
  } [ 0 ]

Model {
  dbModel = Model {
    iterators = Map.fromList
      [
        _Ã—_
          [37m0[0m
          [
            [41m[97m-TestBlock {
              testHeader = TestHeader {
                thHash = TestHeaderHash
                  `-340232222464533890`,
                thPrevHash = BlockHash
                  (TestHeaderHash
                    8656999388501844387),
                thBodyHash = TestBodyHash
                  590680769285548757,
                thSlotNo = SlotNo 4,
                thBlockNo = BlockNo 2,
                thChainLength = ChainLength 3,
                thIsEBB = RegularBlock},
              testBody = TestBody {
                tbForkNo = 3,
                tbIsValid = True}}[0;41m[0m]],
    maxClockSkew = [37m100000[0m,
    isOpen = [37mTrue[0m,
    volatileDbBlocks = ...},
  modelConfig = [37mOpaque[0m,
  knownIters = ...}

FAIL (7.90s)
          *** Failed! Falsified (after 8682 tests and 22 shrinks):
          MaxClockSkew 100000
          SmallChunkInfo (UniformChunkSize (ChunkSize {chunkCanContainEBB = False, numRegularBlocks = 6}))
          Commands
            { unCommands =
                [ Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 7029910109426438170
                                    , thPrevHash = GenesisHash
                                    , thBodyHash = TestBodyHash 590682968308805178
                                    , thSlotNo = SlotNo 1
                                    , thBlockNo = BlockNo 0
                                    , thChainLength = ChainLength 1
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 1 , tbIsValid = False }
                              }
                      }
                    At { unAt = Resp { getResp = Right (Point Origin) } }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 2308540464147526198
                                    , thPrevHash = GenesisHash
                                    , thBodyHash = TestBodyHash 590681868797176966
                                    , thSlotNo = SlotNo 1
                                    , thBlockNo = BlockNo 0
                                    , thChainLength = ChainLength 1
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 1
                                          , blockPointHash = TestHeaderHash 2308540464147526198
                                          }))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 8656999388501844387
                                    , thPrevHash = BlockHash (TestHeaderHash 2308540464147526198)
                                    , thBodyHash = TestBodyHash 590680769285548757
                                    , thSlotNo = SlotNo 2
                                    , thBlockNo = BlockNo 1
                                    , thChainLength = ChainLength 2
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 2
                                          , blockPointHash = TestHeaderHash 8656999388501844387
                                          }))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash (-340232222464533890)
                                    , thPrevHash = BlockHash (TestHeaderHash 8656999388501844387)
                                    , thBodyHash = TestBodyHash 590680769285548757
                                    , thSlotNo = SlotNo 4
                                    , thBlockNo = BlockNo 2
                                    , thChainLength = ChainLength 3
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 4
                                          , blockPointHash = TestHeaderHash (-340232222464533890)
                                          }))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          Stream
                            (StreamFromInclusive
                               (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)))
                            (StreamToInclusive
                               (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))))
                      }
                    At
                      { unAt =
                          Resp { getResp = Right (Iter (Reference (Symbolic (Var 0)))) }
                      }
                    [ Var 0 ]
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 5928148677101900795
                                    , thPrevHash = BlockHash (TestHeaderHash 5227245844658471275)
                                    , thBodyHash = TestBodyHash 590682968308805179
                                    , thSlotNo = SlotNo 5
                                    , thBlockNo = BlockNo 2
                                    , thChainLength = ChainLength 3
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 1 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 4
                                          , blockPointHash = TestHeaderHash (-340232222464533890)
                                          }))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 5227245844658471275
                                    , thPrevHash = BlockHash (TestHeaderHash 2308540464147526198)
                                    , thBodyHash = TestBodyHash 590682968308805179
                                    , thSlotNo = SlotNo 4
                                    , thBlockNo = BlockNo 1
                                    , thChainLength = ChainLength 2
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 1 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 5
                                          , blockPointHash = TestHeaderHash 5928148677101900795
                                          }))
                            }
                      }
                    []
                , Command
                    At { unAt = IteratorNext (Reference (Symbolic (Var 0))) }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (IterResult
                                     (IteratorResult
                                        ( TestBlock
                                            { testHeader =
                                                TestHeader
                                                  { thHash = TestHeaderHash 2308540464147526198
                                                  , thPrevHash = GenesisHash
                                                  , thBodyHash = TestBodyHash 590681868797176966
                                                  , thSlotNo = SlotNo 1
                                                  , thBlockNo = BlockNo 0
                                                  , thChainLength = ChainLength 1
                                                  , thIsEBB = RegularBlock
                                                  }
                                            , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                                            }
                                        , TestBlock
                                            { testHeader =
                                                TestHeader
                                                  { thHash = TestHeaderHash 2308540464147526198
                                                  , thPrevHash = GenesisHash
                                                  , thBodyHash = TestBodyHash 590681868797176966
                                                  , thSlotNo = SlotNo 1
                                                  , thBlockNo = BlockNo 0
                                                  , thChainLength = ChainLength 1
                                                  , thIsEBB = RegularBlock
                                                  }
                                            , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                                            }
                                        , TestHeader
                                            { thHash = TestHeaderHash 2308540464147526198
                                            , thPrevHash = GenesisHash
                                            , thBodyHash = TestBodyHash 590681868797176966
                                            , thSlotNo = SlotNo 1
                                            , thBlockNo = BlockNo 0
                                            , thChainLength = ChainLength 1
                                            , thIsEBB = RegularBlock
                                            }
                                        , "\131\NUL\136\NUL\ESC \t\149R+ \242\&6\128\ESC\b2\134\a\180\235l\134\SOH\NUL\SOH\129\SOH\131\NUL\STX\245"
                                        , "\136\NUL\ESC \t\149R+ \242\&6\128\ESC\b2\134\a\180\235l\134\SOH\NUL\SOH\129\SOH"
                                        , TestHeaderHash 2308540464147526198
                                        , SlotNo 1
                                        , IsNotEBB
                                        , 32
                                        , 26
                                        , SomeSecond NestedCtxt { flipNestedCtxt = CtxtTestBlock }
                                        )))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash 3200521468649028381
                                    , thPrevHash = BlockHash (TestHeaderHash 5928148677101900795)
                                    , thBodyHash = TestBodyHash 590681868797176966
                                    , thSlotNo = SlotNo 8
                                    , thBlockNo = BlockNo 3
                                    , thChainLength = ChainLength 4
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 2 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 8
                                          , blockPointHash = TestHeaderHash 3200521468649028381
                                          }))
                            }
                      }
                    []
                , Command
                    At
                      { unAt =
                          AddBlock
                            TestBlock
                              { testHeader =
                                  TestHeader
                                    { thHash = TestHeaderHash (-5616847762568615097)
                                    , thPrevHash = BlockHash (TestHeaderHash 3200521468649028381)
                                    , thBodyHash = TestBodyHash 590680769285548757
                                    , thSlotNo = SlotNo 9
                                    , thBlockNo = BlockNo 4
                                    , thChainLength = ChainLength 5
                                    , thIsEBB = RegularBlock
                                    }
                              , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                              }
                      }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (Point
                                     (At
                                        Block
                                          { blockPointSlot = SlotNo 9
                                          , blockPointHash = TestHeaderHash (-5616847762568615097)
                                          }))
                            }
                      }
                    []
                , Command
                    At { unAt = PersistBlksThenGC }
                    At { unAt = Resp { getResp = Right (Unit ()) } }
                    []
                , Command
                    At { unAt = IteratorNextGCed (Reference (Symbolic (Var 0))) }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (IterResultGCed
                                     IteratorResultGCed
                                       { real = False
                                       , iterResult =
                                           IteratorResult
                                             ( TestBlock
                                                 { testHeader =
                                                     TestHeader
                                                       { thHash = TestHeaderHash 8656999388501844387
                                                       , thPrevHash =
                                                           BlockHash (TestHeaderHash 2308540464147526198)
                                                       , thBodyHash = TestBodyHash 590680769285548757
                                                       , thSlotNo = SlotNo 2
                                                       , thBlockNo = BlockNo 1
                                                       , thChainLength = ChainLength 2
                                                       , thIsEBB = RegularBlock
                                                       }
                                                 , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                                                 }
                                             , TestBlock
                                                 { testHeader =
                                                     TestHeader
                                                       { thHash = TestHeaderHash 8656999388501844387
                                                       , thPrevHash =
                                                           BlockHash (TestHeaderHash 2308540464147526198)
                                                       , thBodyHash = TestBodyHash 590680769285548757
                                                       , thSlotNo = SlotNo 2
                                                       , thBlockNo = BlockNo 1
                                                       , thChainLength = ChainLength 2
                                                       , thIsEBB = RegularBlock
                                                       }
                                                 , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                                                 }
                                             , TestHeader
                                                 { thHash = TestHeaderHash 8656999388501844387
                                                 , thPrevHash = BlockHash (TestHeaderHash 2308540464147526198)
                                                 , thBodyHash = TestBodyHash 590680769285548757
                                                 , thSlotNo = SlotNo 2
                                                 , thBlockNo = BlockNo 1
                                                 , thChainLength = ChainLength 2
                                                 , thIsEBB = RegularBlock
                                                 }
                                             , "\131\NUL\136\NUL\ESCx#\215\DC3\188m!\163\129\ESC \t\149R+ \242\&6\ESC\b2\133\a\180\235j\213\STX\SOH\STX\129\SOH\131\NUL\ETX\245"
                                             , "\136\NUL\ESCx#\215\DC3\188m!\163\129\ESC \t\149R+ \242\&6\ESC\b2\133\a\180\235j\213\STX\SOH\STX\129\SOH"
                                             , TestHeaderHash 8656999388501844387
                                             , SlotNo 2
                                             , IsNotEBB
                                             , 41
                                             , 35
                                             , SomeSecond NestedCtxt { flipNestedCtxt = CtxtTestBlock }
                                             )
                                       })
                            }
                      }
                    []
                , Command
                    At { unAt = IteratorNextGCed (Reference (Symbolic (Var 0))) }
                    At
                      { unAt =
                          Resp
                            { getResp =
                                Right
                                  (IterResultGCed
                                     IteratorResultGCed
                                       { real = False
                                       , iterResult =
                                           IteratorResult
                                             ( TestBlock
                                                 { testHeader =
                                                     TestHeader
                                                       { thHash = TestHeaderHash (-340232222464533890)
                                                       , thPrevHash =
                                                           BlockHash (TestHeaderHash 8656999388501844387)
                                                       , thBodyHash = TestBodyHash 590680769285548757
                                                       , thSlotNo = SlotNo 4
                                                       , thBlockNo = BlockNo 2
                                                       , thChainLength = ChainLength 3
                                                       , thIsEBB = RegularBlock
                                                       }
                                                 , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                                                 }
                                             , TestBlock
                                                 { testHeader =
                                                     TestHeader
                                                       { thHash = TestHeaderHash (-340232222464533890)
                                                       , thPrevHash =
                                                           BlockHash (TestHeaderHash 8656999388501844387)
                                                       , thBodyHash = TestBodyHash 590680769285548757
                                                       , thSlotNo = SlotNo 4
                                                       , thBlockNo = BlockNo 2
                                                       , thChainLength = ChainLength 3
                                                       , thIsEBB = RegularBlock
                                                       }
                                                 , testBody = TestBody { tbForkNo = 3 , tbIsValid = True }
                                                 }
                                             , TestHeader
                                                 { thHash = TestHeaderHash (-340232222464533890)
                                                 , thPrevHash = BlockHash (TestHeaderHash 8656999388501844387)
                                                 , thBodyHash = TestBodyHash 590680769285548757
                                                 , thSlotNo = SlotNo 4
                                                 , thBlockNo = BlockNo 2
                                                 , thChainLength = ChainLength 3
                                                 , thIsEBB = RegularBlock
                                                 }
                                             , "\131\NUL\136\NUL;\EOT\184\191gY#\229\129\129\ESCx#\215\DC3\188m!\163\ESC\b2\133\a\180\235j\213\EOT\STX\ETX\129\SOH\131\NUL\ETX\245"
                                             , "\136\NUL;\EOT\184\191gY#\229\129\129\ESCx#\215\DC3\188m!\163\ESC\b2\133\a\180\235j\213\EOT\STX\ETX\129\SOH"
                                             , TestHeaderHash (-340232222464533890)
                                             , SlotNo 4
                                             , IsNotEBB
                                             , 41
                                             , 35
                                             , SomeSecond NestedCtxt { flipNestedCtxt = CtxtTestBlock }
                                             )
                                       })
                            }
                      }
                    []
                ]
            }
          Model chain: Genesis :> TestBlock {testHeader = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 2, tbIsValid = True}} :> TestBlock {testHeader = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 1, tbIsValid = True}} :> TestBlock {testHeader = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 1, tbIsValid = True}} :> TestBlock {testHeader = TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 2, tbIsValid = True}} :> TestBlock {testHeader = TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 3, tbIsValid = True}}
          TraceEvents: TraceOpenEvent StartedOpeningDB
          TraceOpenEvent StartedOpeningImmutableDB
          TraceImmutableDBEvent NoValidLastLocation
          TraceOpenEvent (OpenedImmutableDB Origin 0)
          TraceOpenEvent StartedOpeningVolatileDB
          TraceOpenEvent OpenedVolatileDB
          TraceOpenEvent StartedOpeningLgrDB
          TraceLedgerReplayEvent (ReplayFromGenesis (ReplayGoal Origin))
          TraceOpenEvent OpenedLgrDB
          TraceInitChainSelEvent StartedInitChainSelection
          TraceInitChainSelEvent InitalChainSelected
          TraceOpenEvent (OpenedDB Origin Origin)
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)) (BlockNo 0) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)) (BlockNo 0) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 7029910109426438170, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590682968308805178, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}) RisingEdge))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 7029910109426438170, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590682968308805178, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}) (FallingEdgeWith ())))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)}) (PushGoal {unPushGoal = RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)}) (Pushing {unPushing = RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170)}))))
          TraceAddBlockEvent (AddBlockValidation (InvalidBlock (ExtValidationErrorLedger InvalidBlock) (RealPoint (SlotNo 1) (TestHeaderHash 7029910109426438170))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList []}})))
          TraceAddBlockEvent (PipeliningEvent (TrapTentativeHeader (TestHeader {thHash = TestHeaderHash 7029910109426438170, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590682968308805178, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock})))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)) (BlockNo 0) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)) (BlockNo 0) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)}) (PushGoal {unPushGoal = RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)}) (Pushing {unPushing = RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 1, blockPointHash = TestHeaderHash 2308540464147526198})))
          TraceAddBlockEvent (AddedToCurrentChain [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198), newTipEpoch = EpochNo 0, newTipSlotInEpoch = 1, newTipTrigger = RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198)}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList []}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)) (BlockNo 1) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)) (BlockNo 1) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}) RisingEdge))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}) (FallingEdgeWith ())))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)}) (PushGoal {unPushGoal = RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)}) (Pushing {unPushing = RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = Anchor (SlotNo 1) (TestHeaderHash 2308540464147526198) (BlockNo 0), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 2, blockPointHash = TestHeaderHash 8656999388501844387})))
          TraceAddBlockEvent (AddedToCurrentChain [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387), newTipEpoch = EpochNo 0, newTipSlotInEpoch = 2, newTipTrigger = RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}}]}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PipeliningEvent (OutdatedTentativeHeader (TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock})))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890)))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))) (BlockNo 2) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))) (BlockNo 2) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}) RisingEdge))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}) (FallingEdgeWith ())))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))}) (PushGoal {unPushGoal = RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))}) (Pushing {unPushing = RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = Anchor (SlotNo 2) (TestHeaderHash 8656999388501844387) (BlockNo 1), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 4, blockPointHash = TestHeaderHash (-340232222464533890)})))
          TraceAddBlockEvent (AddedToCurrentChain [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890)), newTipEpoch = EpochNo 0, newTipSlotInEpoch = 4, newTipTrigger = RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}}]}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PipeliningEvent (OutdatedTentativeHeader (TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock})))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceIteratorEvent (StreamFromVolatileDB (StreamFromInclusive (RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198))) (StreamToInclusive (RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890)))) [RealPoint (SlotNo 1) (TestHeaderHash 2308540464147526198),RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387),RealPoint (SlotNo 4) (TestHeaderHash (-340232222464533890))])
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)) (BlockNo 2) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)) (BlockNo 2) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (StoreButDontChange (RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)) (BlockNo 1) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)) (BlockNo 1) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TrySwitchToAFork (RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)) (ChainDiff {getRollback = 2, getSuffix = AnchoredSeq {anchor = Anchor (SlotNo 1) (TestHeaderHash 2308540464147526198) (BlockNo 0), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = HeaderFields {headerFieldSlot = SlotNo 4, headerFieldBlockNo = BlockNo 1, headerFieldHash = TestHeaderHash 5227245844658471275}}]}}}))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)}) (PushGoal {unPushGoal = RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)}) (Pushing {unPushing = RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)}))))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)}) (PushGoal {unPushGoal = RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)}) (Pushing {unPushing = RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795)}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = Anchor (SlotNo 1) (TestHeaderHash 2308540464147526198) (BlockNo 0), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 5, blockPointHash = TestHeaderHash 5928148677101900795})))
          TraceAddBlockEvent (SwitchedToAFork [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 5) (TestHeaderHash 5928148677101900795), newTipEpoch = EpochNo 0, newTipSlotInEpoch = 5, newTipTrigger = RealPoint (SlotNo 4) (TestHeaderHash 5227245844658471275)}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 8656999388501844387, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 2, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)) (BlockNo 3) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)) (BlockNo 3) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}) RisingEdge))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}) (FallingEdgeWith ())))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)}) (PushGoal {unPushGoal = RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)}) (Pushing {unPushing = RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = Anchor (SlotNo 5) (TestHeaderHash 5928148677101900795) (BlockNo 2), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 8, blockPointHash = TestHeaderHash 3200521468649028381})))
          TraceAddBlockEvent (AddedToCurrentChain [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381), newTipEpoch = EpochNo 1, newTipSlotInEpoch = 2, newTipTrigger = RealPoint (SlotNo 8) (TestHeaderHash 3200521468649028381)}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}}]}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PipeliningEvent (OutdatedTentativeHeader (TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock})))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))) RisingEdge)
          TraceAddBlockEvent (AddedBlockToQueue (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))) (FallingEdgeWith 1))
          TraceAddBlockEvent (PoppedBlockFromQueue (FallingEdgeWith (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097)))))
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))) (BlockNo 4) IsNotEBB RisingEdge)
          TraceAddBlockEvent (AddedBlockToVolatileDB (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))) (BlockNo 4) IsNotEBB (FallingEdgeWith ()))
          TraceAddBlockEvent (TryAddToCurrentChain (RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock}) RisingEdge))
          TraceAddBlockEvent (PipeliningEvent (SetTentativeHeader (TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock}) (FallingEdgeWith ())))
          TraceAddBlockEvent (AddBlockValidation (UpdateLedgerDbTraceEvent (StartedPushingBlockToTheLedgerDb (PushStart {unPushStart = RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))}) (PushGoal {unPushGoal = RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))}) (Pushing {unPushing = RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))}))))
          TraceAddBlockEvent (AddBlockValidation (ValidCandidate (AnchoredSeq {anchor = Anchor (SlotNo 8) (TestHeaderHash 3200521468649028381) (BlockNo 3), unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock}}]}})))
          TraceAddBlockEvent (ChangingSelection (At (Block {blockPointSlot = SlotNo 9, blockPointHash = TestHeaderHash (-5616847762568615097)})))
          TraceAddBlockEvent (AddedToCurrentChain [] (NewTipInfo {newTipPoint = RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097)), newTipEpoch = EpochNo 1, newTipSlotInEpoch = 3, newTipTrigger = RealPoint (SlotNo 9) (TestHeaderHash (-5616847762568615097))}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}}]}}) (AnchoredSeq {anchor = AnchorGenesis, unanchorSeq = SFT {fromStrict = fromList [MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 2308540464147526198, thPrevHash = GenesisHash, thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 1, thBlockNo = BlockNo 0, thChainLength = ChainLength 1, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5227245844658471275, thPrevHash = BlockHash (TestHeaderHash 2308540464147526198), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 4, thBlockNo = BlockNo 1, thChainLength = ChainLength 2, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 5928148677101900795, thPrevHash = BlockHash (TestHeaderHash 5227245844658471275), thBodyHash = TestBodyHash 590682968308805179, thSlotNo = SlotNo 5, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash 3200521468649028381, thPrevHash = BlockHash (TestHeaderHash 5928148677101900795), thBodyHash = TestBodyHash 590681868797176966, thSlotNo = SlotNo 8, thBlockNo = BlockNo 3, thChainLength = ChainLength 4, thIsEBB = RegularBlock}},MeasuredWith {unMeasuredWith = TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock}}]}}))
          TraceAddBlockEvent (PipeliningEvent (OutdatedTentativeHeader (TestHeader {thHash = TestHeaderHash (-5616847762568615097), thPrevHash = BlockHash (TestHeaderHash 3200521468649028381), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 9, thBlockNo = BlockNo 4, thChainLength = ChainLength 5, thIsEBB = RegularBlock})))
          TraceAddBlockEvent (PoppedBlockFromQueue RisingEdge)
          TraceCopyToImmutableDBEvent (CopiedBlockToImmutableDB (At (Block {blockPointSlot = SlotNo 1, blockPointHash = TestHeaderHash 2308540464147526198})))
          TraceCopyToImmutableDBEvent (CopiedBlockToImmutableDB (At (Block {blockPointSlot = SlotNo 4, blockPointHash = TestHeaderHash 5227245844658471275})))
          TraceCopyToImmutableDBEvent (CopiedBlockToImmutableDB (At (Block {blockPointSlot = SlotNo 5, blockPointHash = TestHeaderHash 5928148677101900795})))
          TraceGCEvent (PerformedGC (SlotNo 5))
          TraceIteratorEvent (BlockMissingFromVolatileDB (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)))
          TraceImmutableDBEvent (TraceCacheEvent (TraceCurrentChunkHit 0 0))
          TraceImmutableDBEvent (TraceCacheEvent (TraceCurrentChunkHit 0 0))
          TraceImmutableDBEvent (TraceCacheEvent (TraceCurrentChunkHit 0 0))
          TraceImmutableDBEvent (TraceCacheEvent (TraceCurrentChunkHit 0 0))
          TraceImmutableDBEvent (TraceCacheEvent (TraceCurrentChunkHit 0 0))
          TraceIteratorEvent (BlockGCedFromVolatileDB (RealPoint (SlotNo 2) (TestHeaderHash 8656999388501844387)))
          
          PostconditionFailed "AnnotateC \"real response didn't match model response\" (PredicateC (Resp {getResp = Right (IterResultGCed (IteratorResultGCed {real = True, iterResult = IteratorExhausted}))} :/= Resp {getResp = Right (IterResultGCed (IteratorResultGCed {real = False, iterResult = IteratorResult (TestBlock {testHeader = TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 3, tbIsValid = True}},TestBlock {testHeader = TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock}, testBody = TestBody {tbForkNo = 3, tbIsValid = True}},TestHeader {thHash = TestHeaderHash (-340232222464533890), thPrevHash = BlockHash (TestHeaderHash 8656999388501844387), thBodyHash = TestBodyHash 590680769285548757, thSlotNo = SlotNo 4, thBlockNo = BlockNo 2, thChainLength = ChainLength 3, thIsEBB = RegularBlock},\"\\131\\NUL\\136\\NUL;\\EOT\\184\\191gY#\\229\\129\\129\\ESCx#\\215\\DC3\\188m!\\163\\ESC\\b2\\133\\a\\180\\235j\\213\\EOT\\STX\\ETX\\129\\SOH\\131\\NUL\\ETX\\245\",\"\\136\\NUL;\\EOT\\184\\191gY#\\229\\129\\129\\ESCx#\\215\\DC3\\188m!\\163\\ESC\\b2\\133\\a\\180\\235j\\213\\EOT\\STX\\ETX\\129\\SOH\",TestHeaderHash (-340232222464533890),SlotNo 4,IsNotEBB,41,35,SomeSecond (NestedCtxt {flipNestedCtxt = CtxtTestBlock}))}))}))" /= Ok
          Use --quickcheck-replay=845234 to reproduce.

1 out of 1 tests failed (7.90s)
