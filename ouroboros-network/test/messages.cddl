; The only purpose of allMessages is to have an entry point for testing all parts of the specification.
; ! allMessages is NOT a valid wire format !

allMessages =
      [0,chainSyncMessage]
    / [1,reqRespMessage]
    / [2,pingPongMessage]
    / [3,blockFetchMessage]
    / [4,txSubmissionMessage]
    / [5, handshakeMessage]

; Chain Sync Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/ChainSync/Codec/Cbor.hs

chainSyncMessage
    = msgRequestNext
    / msgAwaitReply
    / msgRollForward
    / msgRollBackward
    / msgFindIntersect
    / msgIntersectImproved
    / msgIntersectUnchanged
    / chainSyncMsgDone

; these records use fixed length list encodings TODO: lookup CDDL syntax for that
msgRequestNext         = [0]
msgAwaitReply          = [1]
msgRollForward         = [2, header, point]
msgRollBackward        = [3, header, point]
msgFindIntersect       = [4, points]
msgIntersectImproved   = [5, point, point]
msgIntersectUnchanged  = [6, point]
chainSyncMsgDone   = [7]

points = [point]

header = bytes .cbor any ; todo include definitions for header and point
point = bytes .cbor any

; Request Response Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/ReqResp/Codec.hs

reqRespMessage
    = msgRequest
    / msgResponse
    / reqRespMsgDone

msgRequest  = [0,  requestData]
msgResponse = [1, responseData]
reqRespMsgDone = [2]

requestData  = bytes .cbor any
responseData = bytes .cbor any

; Ping-Pong Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/PingPong/Codec.hs
pingPongMessage
    = msgPing
    / msgPong
    / pingPongMsgDone
msgPing = 0
msgPong = 1
pingPongMsgDone = 2

; BlockFetch Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/BlockFetch/Codec.hs

blockFetchMessage
     = msgRequestRange
     / msgClientDone
     / msgStartBatch
     / msgNoBlocks
     / msgBlock
     / msgBatchDone

msgRequestRange = [0, bfPoint, bfPoint]
msgClientDone   = [1]
msgStartBatch   = [2]
msgNoBlocks     = [3]
msgBlock        = [4, bfBody]
msgBatchDone    = [5]

bfPoint         = origin / [[slotNo, blockHash]]
slotNo          = uint ; word64
origin          = []
blockHash       = dummyBlockHash
dummyBlockHash  = null
bfBody          = bytes .cbor any


; Transaction Submission Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/TxSubmission/Codec.hs

txSubmissionMessage
    = msgGetHashes
    / msgSendHashes
    / msgGetTx
    / msgTx
    / txSubmissionMsgDone

msgGetHashes  = [0,int]
msgSendHashes = [1,[txHash]]
msgGetTx      = [2,txHash]
msgTx         = [3,transaction]
txSubmissionMsgDone = [4]

txHash        = bytes .cbor any
transaction   = bytes .cbor any

; ToDo
; MuxControl Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Mux/Control.hs
; muxControlMessage = msgInitReq / msgInitRsp / msgInitFail
; msgInitReq  = [0]
; msgInitRsp  = [1]
; msgInitFail = [2]
; Handshake Protocol
; reference implementation of the codec in
; ouroboros-network/src/Ouroboros/Network/Protocol/Handshake/Codec.hs

versionNumber = uint .size 4
handshakeMessage =
       msgProposeVersions
     / msgAcceptVersion
     / msgRefuse

msgProposeVersions = [0 , versionTable]

; CDDL is not expressive enough to describe the all possible values of proposeVersions.
; proposeVersions is a tables that maps version numbers to version parameters.
; The codec requires that the keys are unique and in ascending order.
; This specification only enumerates version numbers from 1..4.

params = any
extraParams = any
versionTable =
    { ? 1 => params
    , ? 2 => params
    , ? 3 => params
    , ? 4 => params
    }

msgAcceptVersion   = [1, versionNumber, extraParams]
msgRefuse          = [2, refuseReason ]

refuseReason
    = refuseReasonVersionMismatch
    / refuseReasonHandshakeDecodeError
    / refuseReasonRefused

refuseReasonVersionMismatch      = [0 , [ versionNumber] ]
refuseReasonHandshakeDecodeError = [1 , versionNumber, tstr]
refuseReasonRefused              = [2 , versionNumber, tstr]
