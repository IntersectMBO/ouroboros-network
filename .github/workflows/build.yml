name: Haskell CI

on:
  pull_request:
  push:
    branches:
      - 'bors/*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7", "9.2.5"]
        os: [ubuntu-latest, windows-latest]

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2022-12-30"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

      SECP_CACHE_VERSION: "2022-12-30"

      # OpenSSL is installed in a non-standard location in MacOS. See
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
      PKG_CONFIG_PATH: ${{ (matrix.os == 'macos-latest' && '/usr/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig') || (matrix.os == 'ubuntu-latest' && '/usr/lib/pkgconfig:/usr/local/lib/pkgconfig') || '' }}

      # we need the LD_LIBRARY_PATH env var here because we ended up installing libsecp256k1 into /usr/local,
      # pkg-config, *does* return the proper location, but the library does not appear to be properly referenced.
      # FIXME: this is arguably a bug, and pkg-config should return the right values!
      LD_LIBRARY_PATH: ${{ (matrix.os != 'windows-latest' && '/usr/local/lib') || '' }}

    steps:
    - name: "WIN: Install System Dependencies via pacman (msys2)"
      if: runner.os == 'Windows'
      run: |
        # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
        # pacman, to install the necessary dependencies, ...
        ghcup run -- pacman --noconfirm -S `
           mingw-w64-x86_64-pkg-config `
           mingw-w64-x86_64-libsodium `
           base-devel `
           autoconf-wrapper `
           autoconf `
           automake `
           libtool `
           make

    # this seems to break something. It _must_ come after the pacman setup
    # above. It appears as if PATHEXT is set _after_ ghcup install ghc/cabal, and
    # as such we'd need pacman.exe instead.
    - name: Setup Haskell
      run: |        
        # Use GHCUP to manage ghc/cabal
        ghcup install ghc --set ${{ matrix.ghc }}
        ghcup install cabal --set 3.6.2.0

        ghc --version
        cabal --version

    - name: "WIN: fixup cabal config"
      if: runner.os == 'Windows'
      run: |
        # make sure cabal knows about msys64, and mingw64 tools. Not clear why C:/cabal/config is empty
        # and C:/cabal doesn't even exist.  The ghcup bootstrap file should have create it in the image:
        # See https://github.com/haskell/ghcup-hs/blob/787edc17af4907dbc51c85e25c490edd8d68b80b/scripts/bootstrap/bootstrap-haskell#L591
        # So we'll do it by hand here for now.
        #
        # We'll _not_ add extra-include-dirs, or extra-lib-dirs, and rely on what's shipped with GHC.
        # https://github.com/msys2/MINGW-packages/issues/10837#issuecomment-1047105402
        # https://gitlab.haskell.org/ghc/ghc/-/issues/21111
        # if we _do_ want them, this would be the lines to add below
        
        $ghcMingwDir = Join-Path -Path $(ghc --print-libdir) `
                                 -ChildPath ../mingw/x86_64-*-mingw32/lib/ `
                                 -Resolve
        
        cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a ("extra-lib-dirs: {0}, C:/msys64/mingw64/lib" -f $ghcMingwDir) `
                          -f init

    - name: "OUTPUT Record cabal-store (Linux)"
      id: lin-setup-haskell
      shell: bash
      if: runner.os != 'Windows'
      run: |
        echo "cabal-store=/home/runner/.cabal/store" >> $GITHUB_OUTPUT
        
    - name: "OUTPUT Record cabal-store (Windows)"
      id: win-setup-haskell
      shell: bash
      if: runner.os == 'Windows'
      run: |
        echo "cabal-store=C:\\cabal\\store" >> $GITHUB_OUTPUT     

    - name: "[OUTPUT] cache keys: version, weeknum"
      id: cache-keys
      shell: bash
      run: |
        echo "weeknum=$(/usr/bin/date -u "+%W")" >> $GITHUB_OUTPUT
        echo "CACHE_VERSION=20220919" >> $GITHUB_OUTPUT
        echo "DIST_CACHE_VERSION=20221122" >> $GITHUB_OUTPUT

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: sudo apt-get -y install autoconf automake libtool

    - uses: actions/checkout@v3

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - name: "Configure cabal.project.local"
      if: runner.os != 'Windows'
      run: |
        cp .github/workflows/cabal.project.local.Linux cabal.project.local

    - name: "Configure cabal.project.local Windows"
      if: runner.os == 'Windows'
      run: |
        cp .github/workflows/cabal.project.local.Windows cabal.project.local

    - name: Update Hackage and CHaP
      run: cabal update

    - name: Record dependencies
      id: record-deps
      run: |
        cabal build all --dry-run
        cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt

    - uses: actions/cache@v3
      name: "Cache `cabal store`"
      with:
        path: ${{ runner.os == 'Windows' && steps.win-setup-haskell.outputs.cabal-store || steps.lin-setup-haskell.outputs.cabal-store }}
        key: cache-dependencies-${{ env.CABAL_CACHE_VERSION }}-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
        restore-keys: cache-dependencies-${{ env.CABAL_CACHE_VERSION }}-${{ steps.cache-keys.outputs.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - uses: actions/cache@v3
      name: "Cache `dist-newstyle`"
      with:
        path: |
          dist-newstyle
          !dist-newstyle/**/.git
        key: cache-dist-${{ env.CABAL_CACHE_VERSION }}-${{ steps.cache-keys.outputs.DIST_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ steps.cache-keys.outputs.weeknum }}
        restore-keys: cache-dist-${{ env.CABAL_CACHE_VERSION }}-${{ steps.cache-keys.outputs.DIST_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build dependencies
      run: cabal build --only-dependencies all -j

    - name: Build projects [build]
      run: cabal build all -j

    # Test network packages

    - name: ntp-client [test]
      run: cabal run ntp-client:test

    - name: network-mux [test]
      run: cabal run network-mux:test

    - name: ourobors-network-testing [test]
      run: cabal run ouroboros-network-testing:test

    - name: ourobors-network-framework [test]
      run: cabal run ouroboros-network-framework:test

    - name: ouroboros-network-protocols [test]
      run: cabal run ouroboros-network-protocols:test

    # We don't run cddl in GitHub actions (only on Hydra).
    # - name: ouroboros-network-protocols [cddl]
    #   run: cabal run ouroboros-network-protocols-test:cddl

    - name: ouroboros-network [test]
      run: cabal run ouroboros-network:test

    # Consensus tests take too long on GitHub's Azure machines

    # Uncomment the following back in for debugging. Remember to launch a `pwsh` from
    # the tmux session to debug `pwsh` issues. And be reminded that the `/msys2` and
    # `/msys2/mingw64` paths are not in PATH by default for the workflow, but tmate
    # will put them in.
    # You may also want to run
    #
    #   $env:PATH=("C:\Program Files\PowerShell\7;{0}" -f $env:ORIGINAL_PATH)
    #
    # to restore the original path.  Do note that some test might need msys2
    # and will silently fail if msys2 is not in path. See the "Run tests" step.
    #
    # - name: Setup tmate session
    #   if: ${{ failure() }}
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true
