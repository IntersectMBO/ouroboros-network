name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        subset: [network, consensus]
        ghc: ["8.6.5", "8.10.3"]
        os: [ubuntu-20.04, windows-latest]
        exclude:
          - os: windows-latest
            subset: consensus

    steps:
    - uses: actions/checkout@v2

    - name: Select build directory
      run: |
        if [ "$OS" == Windows_NT ]; then
          CABAL_BUILDDIR="D:\\a\\_temp\\dist"
        else
          CABAL_BUILDDIR="dist-newstyle"
        fi

        echo "CABAL_BUILDDIR=$CABAL_BUILDDIR"
        echo "CABAL_BUILDDIR=$CABAL_BUILDDIR" >> $GITHUB_ENV

    - name: Set cache version
      run: echo "CACHE_VERSION=9w76Z3Q" >> $GITHUB_ENV

    - name: Install pkgconfiglite
      if: matrix.os == 'windows-latest'
      run: choco install -y pkgconfiglite

    - name: Install libsodium (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "RUNNER_TEMP=$RUNNER_TEMP"
        cd "$RUNNER_TEMP"

        RUNNER_TEMP_FWD="$(echo "$RUNNER_TEMP" | sed 's|\\|/|g')"

        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz

        tar zxvf libsodium-1.0.18-mingw.tar.gz
        sed -i "s|/d/a/1/s/|$RUNNER_TEMP_FWD\/|g" libsodium-win64/lib/pkgconfig/libsodium.pc

        export PKG_CONFIG_PATH="$(readlink -f libsodium-win64/lib/pkgconfig)"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        export LIBSODIUM_PATH="$(readlink -f libsodium-win64/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "LIBSODIUM_PATH=$LIBSODIUM_PATH"
        echo "$LIBSODIUM_PATH" >> $GITHUB_PATH

    - name: Install libsodium (MacOS)
      if: matrix.os == 'macos-latest'
      run: brew install libsodium

    - name: Install build environment
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Select optimal cabal version
      run: |
        case "$OS" in
          Windows_NT)   echo "CABAL_VERSION=3.4.0.0-rc5"  >> $GITHUB_ENV;;
          *)            echo "CABAL_VERSION=3.4.0.0-rc4"  >> $GITHUB_ENV;;
        esac

    - name: Install Haskell
      uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ env.CABAL_VERSION }}

    - name: Show Haskell tool versions
      run: |
        ghc --version
        cabal --version

    - name: Set up temp directory
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "TMPDIR=$RUNNER_TEMP"  >> $GITHUB_ENV
        echo "TMP=$RUNNER_TEMP"     >> $GITHUB_ENV

    - name: Cache cabal store
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cabal-store-${{ env.CACHE_VERSION }}-${{ matrix.ghc }}-${{ matrix.os }}

    - name: Update Hackage index
      run: cabal v2-update

    - name: Cabal Configure
      run: cabal --builddir="$CABAL_BUILDDIR" configure --enable-tests

    - name: Use cabal.project.local.ci.windows
      run: |
        cat ./cabal.project.local.ci.windows >> ./cabal.project.local

        cat >> cabal.project.local <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

        cat ./cabal.project.local

    - name: Install happy
      run: |
        cabal --builddir="$CABAL_BUILDDIR" install happy --install-method=copy

    - name: Build dependencies
      run: cabal --builddir="$CABAL_BUILDDIR" build --only-dependencies all

    - name: Print logs
      if: always()
      run: |
        for x in $(find 'C:\Users\runneradmin\AppData\Roaming\cabal\logs' -name '*.log'); do
          echo "==== $x ===="
          cat "$x"
        done

    - name: Build projects [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build all

    # Test Win32 specific packages

    - name: Win32-network [test]
      if: matrix.os == 'windows-latest'
      run: cabal --builddir="$CABAL_BUILDDIR" run Win32-network:test

    # Test network packages

    - name: ntp-client [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run ntp-client:test

    - name: io-sim [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run io-sim:test

    - name: io-sim-classes [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run io-sim-classes:test

    - name: typed-protocols-examples [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run typed-protocols-examples:tests

    - name: network-mux [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run network-mux:test

    # issue: #1818
    - name: ourobors-network-framework [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run ouroboros-network-framework:test -- -p '$0 != "typed-protocols.Socket.socket send receive IPv4"' 

    - name: ouroboros-network [test]
      if: matrix.subset == 'network'
      run: cabal --builddir="$CABAL_BUILDDIR" run ouroboros-network:test

    # Consensus tests take too long on GitHub's Azure machines
