name: Haskell CI

on:
  pull_request:
  push:
    branches:
      - 'bors/*'

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7"]
        os: [ubuntu-latest, windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:
    - name: "LINUX: Setup haskell"
      if: runner.os != 'Windows'
      uses: haskell/actions/setup@v2
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 3.6.2.0

    - name: "WIN: Setup Haskell"
      if: runner.os == 'Windows'
      run: |
        # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
        # pacman, to install the necessary dependencies, ...
        ghcup run -- pacman --noconfirm -S `
           mingw-w64-x86_64-pkg-config `
           mingw-w64-x86_64-libsodium `
           base-devel `
           autoconf-wrapper `
           autoconf `
           automake `
           libtool `
           make

        # ... and also the ghc and cabal combination we want.
        ghcup install ghc ${{ matrix.ghc }}
        ghcup set ghc ${{ matrix.ghc }}
        ghcup install cabal 3.6.2.0
        ghcup set cabal 3.6.2.0

        ghc --version
        cabal --version

        # make sure cabal knows about msys64, and mingw64 tools. Not clear why C:/cabal/config is empty
        # and C:/cabal doesn't even exist.  The ghcup bootstrap file should have create it in the image:
        # See https://github.com/haskell/ghcup-hs/blob/787edc17af4907dbc51c85e25c490edd8d68b80b/scripts/bootstrap/bootstrap-haskell#L591
        # So we'll do it by hand here for now.
        cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a "extra-lib-dirs: C:/msys64/mingw64/lib" `
                          -f init

    - name: Find pkg-config
      if: runner.os == 'Windows'
      run: |
        where.exe pkg-config
        ghcup run -- where.exe pkg-config

    - name: "OUTPUT Record cabal-store"
      id: win-setup-haskell
      shell: bash
      if: runner.os == 'Windows'
      run: echo "cabal-store=$(dirname $(cabal --help | tail -1 | tr -d ' '))\\store" >> $GITHUB_OUTPUT     

    - name: Set cache version
      run: echo "CACHE_VERSION=20220919" >> $GITHUB_ENV

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: sudo apt-get -y install autoconf automake libtool

    - uses: actions/checkout@v3

    # TODO: this really should come from a pre-built location
    - name: "WIN: Install secp256k1"
      if: runner.os == 'Windows'
      # Same env as tmate action
      env:
        MSYS2_PATH_TYPE: inherit
        MSYSTEM: MINGW64
        CHERE_INVOKING: 1
        # install secp into /mingw64 prefix, which is where pkg-config will look
        # by default.
        CI_SECP_FLAGS: "--prefix=/mingw64"
      run: C:\\msys64\\usr\\bin\\bash.exe .github/workflows/build-secp256k1.bash

    - name: "LINUX: Install secp256k1"
      if: runner.os != 'Windows'
      env:
        CI_SECP_FLAGS: "--prefix=/usr"
        CI_SECP_INSTALL_CMD: sudo
      run: bash .github/workflows/build-secp256k1.bash 

    - name: "Configure cabal.project.local"
      if: runner.os != 'Windows'
      run: |
        cp .github/workflows/cabal.project.local.Linux cabal.project.local

    - name: "Configure cabal.project.local Windows"
      if: runner.os == 'Windows'
      run: |
        cp .github/workflows/cabal.project.local.Windows cabal.project.local

    - name: Update Hackage and CHaP
      run: cabal update

    - name: Record dependencies
      id: record-deps
      run: |
        cabal build all --dry-run
        cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt

    - name: "OUTPUT Record weeknum"
      shell: bash
      run: echo "weeknum=$(/usr/bin/date -u "+%W")" >> $GITHUB_OUTPUT

    - uses: actions/cache@v3
      name: "Cache `cabal store`"
      with:
        path: ${{ runner.os == 'Windows' && steps.win-setup-haskell.outputs.cabal-store || steps.setup-haskell.outputs.cabal-store }}
        key: cache-dependencies-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
        restore-keys: cache-dependencies-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - uses: actions/cache@v3
      name: "Cache `dist-newstyle`"
      with:
        path: |
          dist-newstyle
          !dist-newstyle/**/.git
        key: cache-dist-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ steps.record-deps.outputs.weeknum }}
        restore-keys: cache-dist-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build dependencies
      run: cabal build --only-dependencies all -j

    - name: Build projects [build]
      run: cabal build all -j

    # Test network packages

    - name: ntp-client [test]
      run: cabal run ntp-client:test

    - name: network-mux [test]
      run: cabal run network-mux:test

    - name: ourobors-network-testing [test]
      run: cabal run ouroboros-network-testing:test

    # issue: #1818
    - name: ourobors-network-framework [test]
      run: cabal run ouroboros-network-framework:test '--' -p '$0 != "typed-protocols.Socket.socket send receive IPv4"'

    - name: ouroboros-network [test]
      run: cabal run ouroboros-network:test

    # Consensus tests take too long on GitHub's Azure machines
    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3

